c(beta1,coef(lm(y~x))[2])
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
x
y
beta1<-cor(y,x)* sd(x)/sd(y)
beta0<-mean(x)-beta1*mean(y)
rbind(c(beta0,beta1),coef(lm(x~y)))
yc<-y-mean(y)
xc<-x-mean(x)
beta1<-sum(yc*xc)/sum(xc^2)
c(beta1,coef(lm(y~x))[2])
mtcars
yn<-(y-mean(y))/sd(y)
xn<-(x-mean(x))/sd(x)
c(cor(y,x),cor(yn,xn),coef(lm(yn~xn))[2])
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
normalize.vector(x)
install.packages("ppls")
library("ppls")
normalize.vector(x)
normalize.vector(x, 0, 1)
normalize.vector(x, 1)
normalize.vector(x)
?normalize.vector
x
mean(x)
8.58-9.31
sd(x)
(8.58 - 9.31)/0.7511325
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
yn<-(y-mean(y))/sd(y)
xn<-(x-mean(x))/sd(x)
c(cor(y,x),cor(yn,xn),coef(lm(yn~xn))[2])
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
y <- c(2, 1, 3, 1)
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
yn<-(y-mean(y))/sd(y)
xn<-(x-mean(x))/sd(x)
c(cor(y,x),cor(yn,xn),coef(lm(yn~xn))[2])
yc<-y-mean(y)
xc<-x-mean(x)
beta1<-sum(yc*xc)/sum(xc^2)
c(beta1,coef(lm(y~x))[2])
beta1<-cor(y,x)* sd(x)/sd(y)
beta0<-mean(x)-beta1*mean(y)
rbind(c(beta0,beta1),coef(lm(x~y)))
setwd('/home/cadu/Desktop/Coursera/Exploratory_Data_Analysis/week1/data/ExData_Plotting1')
consuption <- read.csv("data/household_power_consumption.txt", colClasses
= c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
head(consuption)
?quot
?quote
par(quot)
par(quote)
?read.table
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
dunp
debug()
debug
debug(myPlot1())
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1()
myPlot1 <- function(){
consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
head(consuption)
#consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
#          dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
#          row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
#           na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
#          )
#head(consuption)
}
myPlot1 <- function(){
consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
head(consuption)
#consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
#          dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
#          row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
#           na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
#          )
#head(consuption)
}
myPlo1
myPlot1()
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1()
myPlot1 <- function(){
#consuption <- read.csv("data/household_power_consumption.txt", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"))
#head(consuption)
consuption <- read.table("data/household_power_consumption.txt", header = FALSE, sep = ";", quote = "\"'",
dec = ".", col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
na.strings = "NA", colClasses = c("character", "character", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric"),
)
head(consuption)
}
myPlot1()
myPlot1()
plot1 <- function(data=NULL) {
file <- "./data/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", colClasses=c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"),
na="?")
## convert date and time variables to Date/Time class
data$Time <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
data$Date <- as.Date(data$Date, "%d/%m/%Y")
# only use data from the dates 2007-02-01 and 2007-02-02
dates <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
data <- subset(data, Date %in% dates)
## set device to png
png("plot1.png", width=400, height=400)
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)",
ylab="Frequency",
col="red")
## turn off device
dev.off()
}
date_time <- function(date, time) {
return (strptime(paste(date, time), "%d/%m/%Y %H:%M:%S"))
}
plot1()
plot2 <- function(data=NULL) {
file <- "./data/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", colClasses=c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"),
na="?")
## convert date and time variablesv and specify data from the dates 2007-02-01 and 2007-02-02
data$Time <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
data$Date <- as.Date(data$Date, "%d/%m/%Y")
dates <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
data <- subset(data, Date %in% dates)
png("plot2.png", width=400, height=400)
plot(data$Time, data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
# turn off the device
dev.off()
}
plot2()
install.packages("RMySQL")
ucsDb <- dbConnect(MySQl(), user="genone", )
ucsDb <- dbConnect(MySQl(), user="genone", host="genome-mysql.cse.ucsc.edu")
ucsDb <- dbConnect(MySQl(), user="genone", host="genome-mysql.cse.ucsc.edu")
lybrary("RMySQL")
library("RMySQL")
library("RMySQL")
install.packages("RMySQL")
lybrary("RMySQL")
library("RMySQL")
ucsDb <- dbConnect(MySQl(), user="genone", host="genome-mysql.cse.ucsc.edu")
ucsDb <- dbConnect(MySQL(), user="genone", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
localdb <- dbConnect(MySQL(), user="root", password="root", host="localhost")
localdb <- dbConnect(MySQL(), user="root", password="caduCODE2013", host="localhost")
localdb <- dbConnect(MySQL(), user="root", password="caduCODE2013", host="127.0.0.1")
localdb <- dbConnect(MySQL(), user="root", host="127.0.0.1")
result <- dbGetQuery(localdb, "show databases;"); dbDisconnect();
result <- dbGetQuery(localdb, "show databases;"); dbDisconnect();
result <- dbGetQuery(localdb, "show databases;"); dbDisconnect(localdb);
result
swirls()
swirl()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~/galton, data=galton)
lm(child ~galton, data=galton)
lm(child ~galton, galton)
lm(child ~ parent, galton)
lm(formula:child ~ parent, galton)
lm(formula = child ~ parent, galton)
lm(formula = child ~ parent, data = galton)
fit <- lm(formula = child ~ parent, data = galton)
fit <- lm(child ~ parent, data = galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residual, galton$parent)
cov(fit$residuals, galton$parent)
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
pbeta(c(0.4, 0.5, 0.6), 2, 1)
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(ggplot)
install.packages(ggplot)
install.packages("ggplot")
1/6
1*(1/6)+2*(1/6)+3*(1/6)+4*(1/6)+5*(1/6)+6*(1/6)
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1 / sqrt(n)
nosim <- 1000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
nosim <- 1000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
install.packages("ggplo2")
install.packages("ggplot2")
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library("ggplot")
library("ggplot2")
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
sample(0 : 1, nosim * n, replace = TRUE)
nosim <- 1000
n <- 10
sd(apply(matrix(sample(0 : 1, nosim * n, replace = TRUE),
nosim), 1, mean))
library(UsingR); data(father.son);
x <- father.son$sheight
n<-length(x)
round(c(var(x), var(x) / n, sd(x), sd(x) / sqrt(n)),2)
qnorm(.95, mean = mu, sd = sd)
round(c(var(x), var(x) / n, sd(x), sd(x) / sqrt(n)),2)
qnorm(.95, mean = 0, sd = 1)
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm(2.8, lower.tail = FALSE)
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
library(ggplot2)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0.5) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
library(UsingR)
data(father.son)
x <- father.son$sheight
(mean(x) + c(-1, 1) * qnorm(0.975) * sd(x)/sqrt(length(x)))/12
0.56 + c(-1, 1) * qnorm(0.975) * sqrt(0.56 * 0.44/100)
binom.test(56, 100)$conf.int
n <- 20
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage2 <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
5/94
x <- 5
t <- 94.32
lambda <- x/t
round(lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t), 3)
poisson.test(x, T = 94.32)$conf
lambdavals <- seq(0.005, 0.1, by = 0.01)
nosim <- 1000
t <- 100
coverage <- sapply(lambdavals, function(lambda) {
lhats <- rpois(nosim, lambda = lambda * t)/t
ll <- lhats - qnorm(0.975) * sqrt(lhats/t)
ul <- lhats + qnorm(0.975) * sqrt(lhats/t)
mean(ll < lambda & ul > lambda)
})
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
pnorm(>70, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(.95, mean = 1.100, sd = 75)
qnorm(.95, mean = 1100, sd = 75)
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
library(ggplot2)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0.5) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
library(UsingR)
data(father.son)
x <- father.son$sheight
(mean(x) + c(-1, 1) * qnorm(0.975) * sd(x)/sqrt(length(x)))/12
nosim <- 1100
n <- 100
sd(apply(matrix(rnorm(nosim * n), nosim), 75, mean))
qnorm(.95, mean = 1100, sd = 75)
choose(5, 4) * 0.5^5 + choose(5, 5) * 0.5^5
ppois(15, lambda = 15 * 15)
.5 + 1/12
ppois(10, lambda = 5 * 3)
})
install.packages("opts_chunk")
install.packages("date")
library("date")
ls
getwd()
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
install.packages("caret")
install.packages("rpart")
install.packages("tree")
install.packages("randomForest")
install.packages("e1071")
install.packages("ggplot2")
install.packages("ggplot2")
setwd('/home/cadu/Desktop/Coursera/DataScience/assignment5')
myData <- read.csv("seaflow_21min.csv")
summary(myData)
library(caret)
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
training <- myData[inTrainingSet,]
testing <- myData[-inTrainingSet,]
summary(seaflowTrain)
library(ggplot2)
p <- ggplot(myData, aes(x = chl_small, y = pe ) )
p + geom_line(aes(colour = pop))
ggplot(aes(x=chl_small,y=pe,color=pop),data=myData)+geom_jitter()
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model_1 <- rpart(fol, method="class", data=training)
print(model_1)
library(partykit)
install.packages('partykit')
library(partykit)
rpart1a <- as.party(model_1)
plot(rpart1a)
plot(rpart1a)
library(rpart.plot)
predict_1=predict(model_1,newdata=testing)
str(predict_1)
pop_test_1=c()
pop_names=c("crypto","nano","pico","synecho","ultra")
for (i in 1:nrow(predict_1)){
pop_test_1=c(pop_test_1,pop_names[which.max(predict_1[i,])])
}
result_1=as.vector(testing$pop)==pop_test_1
table(result_1)
accuracy_1=sum(result_1)/length(pop_test_1)
predict_1c=predict(model_1,newdata=testing,type= "class")
table(predict_1c, testing$pop)
onfusionMatrix(predict_1c, testing$pop)
confusionMatrix(predict_1c, testing$pop)
install.packages("randomForest")
library(randomForest)
model_6 <- randomForest(fol, data=training)
predict_9c=predict(model_6,newdata=testing,type= "class")
table(predict_9c, testing$pop)
confusionMatrix(predict_9c, testing$pop)
importance(model_6)
library(e1071)
model_svm <- svm(fol, data=training)
model_6 <- randomForest(fol, data=training)
